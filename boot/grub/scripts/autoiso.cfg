# Sample GRUB script to autodetect operating systems
#
# Copyright (C) 2010  Free Software Foundation, Inc.
#
# GRUB is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# GRUB is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GRUB.  If not, see <http://www.gnu.org/licenses/>.

function pathname { regexp -s 2:"$2" '^(\(.*\))?(/.*)$' "$1"; }
function devname  { regexp -s "$2" '^(\(.*\)).*$' "$1"; }

function isolinux_iso_entry {
    realdev="$1"
    isopath="$2"
    loopdev="$3"

    if test -f /boot/isolinux/isolinux.cfg; then
        cfgpath=/boot/isolinux/isolinux.cfg
    elif test -f /isolinux/isolinux.cfg; then
        cfgpath=/isolinux/isolinux.cfg
    else
        return 1;
    fi

    echo isolinux based $isopath: yes
    menuentry "${isopath} (isolinux)" "$realdev" "$isopath" "$cfgpath" {
        set device="$2"
        set isopath="$3"
        set cfgpath="$4"

        loopback loop "${device}${isopath}"
        set root=(loop)

        # this requires a hacked grub!!
        set linux_extra=" isoboot=${isopath} isoloop=${isopath} isofrom=${isopath} iso-scan/filename=${isopath}"
        export linux_extra

        syslinux_configfile $cfgpath
    }
    return 0
}

# iso_path is used by the loopback target, do not change!
function loopback_iso_entry {
    realdev="$1"
    isopath="$2"
    loopdev="$3"

    if test -f /boot/grub/loopback.cfg; then
        cfgpath=/boot/grub/loopback.cfg
    elif test -f /grub/loopback.cfg; then
        cfgpath=/grub/loopback.cfg
    else
        return 1;
    fi

    echo loopback.cfg $isopath: yes
    menuentry "${isopath} (loopback)" "$realdev" "$isopath" "$cfgpath" {
        set device="$2"
        set iso_path="$3"
        set cfg="$4"

        export iso_path
        loopback loop "${device}${iso_path}"
        set root=(loop)
        configfile $cfg
        loopback -d loop
    }
    return 0
}

function bsdfamily_iso_entry {
    realdev="$1"
    isopath="$2"

    if   test -f /FreeNAS-MANIFEST; then kpath=/boot/kernel/kernel; # FreeNAS
    elif test -f /boot/zfsloader;   then kpath=/boot/kernel/kernel; # FreeBSD
    else return 1; fi

    echo bsd-family.cfg $isopath: yes
    menuentry "${isopath} (BSD family)" "$realdev" "$isopath" {
        set device="$2"
        set iso="$3"

        export iso
        loopback loop "${device}${iso}"
        set root=(loop)

	echo "This may take a while..."
	kfreebsd /boot/kernel/kernel
	kfreebsd_module "${device}${iso}" type=mfs_root
	set kFreeBSD.vfs.root.mountfrom=cd9660:/dev/md0
    }
    return 0
}

# grub can't parse sysrcd isolinux.cfg, so we hack an entry
function sysrcd_iso_entry {
    realdev="$1"
    isopath="$2"
    loopdev="$3"

    if ! test -f /sysrcd.dat; then return 1; fi

    set linux_extra=" isoboot=${isopath} isoloop=${isopath} isofrom=${isopath} iso-scan/filename=${isopath}"
    export linux_extra

    echo sysrescue.cfg $isopath: yes
    menuentry "${isopath} (loopback)" "$realdev" "$isopath" {
        set device="$2"
        set iso="$3"

        loopback loop "${device}${iso}"
        set root=(loop)
        set gfxpayload=keep
        linux	/isolinux/rescue64 $linux_extra
        initrd	/isolinux/initram.igz
    }
    return 0
}

function scan_isos {
    isodirs="$1"

    for dev in (*); do
	for dir in $isodirs; do
	    for file in ${dev}${dir}/*.iso ${dev}${dir}/*.ISO; do
		if ! test -f "$file"; then continue; fi

		pathname $file isopath
		if test -z "$dev" -o -z "$isopath"; then continue; fi

		if ! loopback loopdev_scan "$file"; then continue; fi
		saved_root=$root
		set root=(loopdev_scan)

		if    loopback_iso_entry $dev $isopath (loopdev_scan); then true;
		elif    sysrcd_iso_entry $dev $isopath (loopdev_scan); then true;
		elif bsdfamily_iso_entry $dev $isopath (loopdev_scan); then true;
		elif  isolinux_iso_entry $dev $isopath (loopdev_scan); then true;
		else true; fi

		set root=$saved_root
		loopback -d loopdev_scan
	    done
	done
    done
    return 0
}

# XXX Remove later
insmod serial
serial
terminal_output --append serial
# terminal_input --append serial

langcode="$lang"

insmod regexp
scan_isos /iso

